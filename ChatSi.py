# ¬©Ô∏è LoLpryvet, 2025
# üåê https://github.com/lolpryvetik/Modules/ChatSi
# Licensed under GNU AGPL v3.0
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# meta developer: @LoLpryvet


import asyncio
from telethon.tl.functions.messages import GetCommonChatsRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.errors import UserPrivacyRestrictedError, FloodWaitError

from .. import loader, utils


@loader.tds
class ChatSiMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –æ–±—â–∏–º–∏ —á–∞—Ç–∞–º–∏"""

    strings = {"name": "ChatSi"}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    async def chatsicmd(self, message):
        """–ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –æ–±—â–∏–º–∏ —á–∞—Ç–∞–º–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .chatsi <—á–∏—Å–ª–æ> [—Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç] [s - –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ]"""
        args = utils.get_args_raw(message).split()
        
        if not args:
            await message.edit(
                "<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.chatsi <—á–∏—Å–ª–æ> [—Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç] [s]</code>\n"
                "<b>üí° –ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "<code>.chatsi 3</code> - –Ω–∞–π—Ç–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å 3+ –æ–±—â–∏–º–∏ —á–∞—Ç–∞–º–∏\n"
                "<code>.chatsi 5 @chatname</code> - –Ω–∞–π—Ç–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ\n"
                "<code>.chatsi 2 s</code> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
                "<code>.chatsi 3 @chat s</code> - –Ω–∞–π—Ç–∏ –≤ —á–∞—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
            )
            return
        
        try:
            min_common = int(args[0])
            if min_common < 1:
                await message.edit("<b>‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!</b>")
                return
        except ValueError:
            await message.edit("<b>‚ùå –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>")
            return
        
        send_to_saved = 's' in args
        
        target_chat = None
        chat_specified = False
        
        for arg in args[1:]:
            if arg != 's':
                chat_specified = True
                try:
                    target_chat = await message.client.get_entity(arg)
                    break
                except Exception as e:
                    await message.edit(
                        f"<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç:</b> <code>{arg}</code>\n"
                        f"<b>üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ ID</b>"
                    )
                    return
        
        if not chat_specified:
            if message.is_private:
                await message.edit("<b>‚ùå –≠—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç! –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç.</b>")
                return
            target_chat = await message.client.get_entity(message.chat_id)
        
        chat_name = getattr(target_chat, 'title', f'—á–∞—Ç {target_chat.id}')
        await message.edit(f"<b>üîç –ò—â–µ–º –≤ \"{chat_name}\" —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å {min_common}+ –æ–±—â–∏–º–∏ —á–∞—Ç–∞–º–∏...</b>")
        
        try:
            participants = await message.client.get_participants(target_chat)
            target_chat_id = target_chat.id
            
            me = await message.client.get_me()
            
            valid_users = [p for p in participants if not p.bot and not p.deleted and p.id != me.id]
            total_participants = len(valid_users)
            
            result_users = []
            processed = 0
            batch_size = 20
            
            semaphore = asyncio.Semaphore(10)
            
            user_cache = {}
            
            async def process_user_fast(user):
                nonlocal processed
                async with semaphore:
                    try:
                        common_chats = await message.client(
                            GetCommonChatsRequest(user_id=user.id, max_id=0, limit=50)
                        )
                        
                        common_count = sum(1 for chat in common_chats.chats if chat.id != target_chat_id)
                        
                        processed += 1
                        
                        if common_count >= min_common:
                            common_chat_names = []
                            for chat in common_chats.chats:
                                if chat.id != target_chat_id:
                                    chat_name_item = getattr(chat, 'title', f'–ß–∞—Ç {chat.id}')
                                    if getattr(chat, 'username', None):
                                        common_chat_names.append(f"{chat_name_item} (@{chat.username})")
                                    else:
                                        common_chat_names.append(chat_name_item)
                            
                            return {
                                'user': user,
                                'common_count': common_count,
                                'common_chats': common_chat_names
                            }
                        return None
                        
                    except (UserPrivacyRestrictedError, Exception):
                        processed += 1
                        return None
            
            for i in range(0, total_participants, batch_size):
                batch = valid_users[i:i + batch_size]
                
                if i % (batch_size * 2) == 0:
                    await message.edit(
                        f"<b>üöÄ –¢—É—Ä–±–æ-–∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</b>\n"
                        f"<b>üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {min(i + batch_size, total_participants)}/{total_participants}</b>\n"
                        f"<b>‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(result_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>"
                    )
                
                tasks = [process_user_fast(user) for user in batch]
                try:
                    batch_results = await asyncio.wait_for(
                        asyncio.gather(*tasks, return_exceptions=True), 
                        timeout=30
                    )
                    
                    for result in batch_results:
                        if result is not None and not isinstance(result, Exception):
                            result_users.append(result)
                            
                except asyncio.TimeoutError:
                    processed += len(batch)
                    continue
                
                if len(batch_results) == 0:
                    await asyncio.sleep(0.5)
                else:
                    await asyncio.sleep(0.05)
            
            if not result_users:
                result_text = (
                    f"<b>‚ùå –í —á–∞—Ç–µ \"{chat_name}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å {min_common}+ –æ–±—â–∏–º–∏ —á–∞—Ç–∞–º–∏</b>\n"
                    f"<b>üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {processed} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n"
                    f"<b>‚ö° –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∫—Ä–∞—â–µ–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ!</b>"
                )
            else:
                result_users.sort(key=lambda x: x['common_count'], reverse=True)
                
                result_text = f"<b>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ \"{chat_name}\" —Å {min_common}+ –æ–±—â–∏–º–∏ —á–∞—Ç–∞–º–∏:</b>\n\n"
                
                for i, item in enumerate(result_users, 1):
                    user = item['user']
                    count = item['common_count']
                    common_chats_list = item['common_chats']
                    
                    name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                    if user.last_name:
                        name += f" {user.last_name}"
                    
                    chats_preview = ", ".join(common_chats_list[:3])
                    if len(common_chats_list) > 3:
                        chats_preview += f" –∏ –µ—â–µ {len(common_chats_list) - 3}"
                    
                    result_text += f"{i}. <a href='tg://user?id={user.id}'>{name}</a> ‚Äî {count} –æ–±—â–∏—Ö —á–∞—Ç–æ–≤\n"
                    result_text += f"   <i>–ß–∞—Ç—ã: {chats_preview}</i>\n\n"
                
                result_text += f"<b>üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(result_users)} –∏–∑ {processed} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n"
                result_text += f"<b>‚ö° –¢—É—Ä–±–æ-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!</b>"
            
            target_chat_for_send = "me" if send_to_saved else message.chat_id
            
            if len(result_text) > 4096:
                status_msg = "üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ..." if send_to_saved else "üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Å–æ—Ö—Ä–∞–Ω—è—é –≤ —Ñ–∞–π–ª..."
                await message.edit(status_msg)
                
                filename = f"common_chats_{target_chat.id}.txt"
                with open(filename, "w", encoding="utf-8") as f:
                    clean_text = result_text.replace("<b>", "").replace("</b>", "")
                    clean_text = clean_text.replace("<i>", "").replace("</i>", "")
                    clean_text = clean_text.replace("<a href='tg://user?id=", "")
                    clean_text = clean_text.replace("'>", " (ID: ").replace("</a>", ")")
                    
                    if result_users:
                        clean_text += "\n\n=== –ü–û–õ–ù–´–ï –°–ü–ò–°–ö–ò –û–ë–©–ò–• –ß–ê–¢–û–í ===\n\n"
                        for item in result_users:
                            user = item['user']
                            common_chats_list = item['common_chats']
                            name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                            if user.last_name:
                                name += f" {user.last_name}"
                            
                            clean_text += f"=== {name} (ID: {user.id}) ===\n"
                            for j, chat_name in enumerate(common_chats_list, 1):
                                clean_text += f"{j}. {chat_name}\n"
                            clean_text += "\n"
                    
                    f.write(clean_text)
                
                caption = f"<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å {min_common}+ –æ–±—â–∏–º–∏ —á–∞—Ç–∞–º–∏</b>"
                
                await message.client.send_file(
                    target_chat_for_send,
                    filename,
                    caption=caption,
                    reply_to=message.id if not send_to_saved else None
                )
                
                try:
                    import os
                    os.remove(filename)
                except:
                    pass
                
                if send_to_saved:
                    await message.edit("<b>‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!</b>")
                else:
                    await message.delete()
            else:
                if send_to_saved:
                    await message.client.send_message("me", result_text)
                    await message.edit("<b>‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!</b>")
                else:
                    await message.edit(result_text)
                
        except Exception as e:
            await message.edit(
                f"<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b>\n"
                f"<code>{str(e)}</code>\n\n"
                f"<b>üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è</b>"
            )

    async def chatsinkcmd(self, message):
        """–ù–∞–π—Ç–∏ –æ–±—â–∏–µ —á–∞—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .chatsink <@user –∏–ª–∏ —Ä–µ–ø–ª–∞–π> [s - –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ]"""
        args = utils.get_args_raw(message).split()
        reply = await message.get_reply_message()
        
        send_to_saved = 's' in args
        if send_to_saved:
            args = [arg for arg in args if arg != 's']
        
        user_arg = args[0] if args else None
        
        if not user_arg and not reply:
            await message.edit(
                "<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.chatsink <@user> [s]</code> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "<b>üí° –ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "<code>.chatsink @username</code>\n"
                "<code>.chatsink 123456789 s</code> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
                "–ò–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
            return
        
        await message.edit("<b>üîç –ò—â–µ–º –æ–±—â–∏–µ —á–∞—Ç—ã...</b>")
        
        try:
            if user_arg:
                if user_arg.isdigit():
                    user = await message.client.get_entity(int(user_arg))
                else:
                    user = await message.client.get_entity(user_arg)
            else:
                user = await message.client.get_entity(reply.sender_id)
                
            user_full = await message.client(GetFullUserRequest(user.id))
            common_chats = await message.client(
                GetCommonChatsRequest(user_id=user.id, max_id=0, limit=100)
            )
            
            if not common_chats.chats:
                user_name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                result_text = f"<b>‚ùå –û–±—â–∏—Ö —á–∞—Ç–æ–≤ —Å {user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>"
            else:
                user_name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                if user.last_name:
                    user_name += f" {user.last_name}"
                    
                result_text = f"<b>üë• –û–±—â–∏–µ —á–∞—Ç—ã —Å <a href='tg://user?id={user.id}'>{user_name}</a>:</b>\n\n"
                
                for i, chat in enumerate(common_chats.chats, 1):
                    chat_name = getattr(chat, 'title', f'–ß–∞—Ç {chat.id}')
                    
                    if getattr(chat, 'username', None):
                        result_text += f"{i}. <a href='tg://resolve?domain={chat.username}'>{chat_name}</a> (@{chat.username})\n"
                    else:
                        result_text += f"{i}. {chat_name} (ID: {chat.id})\n"
                
                result_text += f"\n<b>üìä –í—Å–µ–≥–æ –æ–±—â–∏—Ö —á–∞—Ç–æ–≤: {len(common_chats.chats)}</b>"
            
            if send_to_saved:
                await message.client.send_message("me", result_text)
                await message.edit("<b>‚úÖ –°–ø–∏—Å–æ–∫ –æ–±—â–∏—Ö —á–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!</b>")
            else:
                await message.edit(result_text)
            
        except Exception as e:
            await message.edit(
                f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—â–∏—Ö —á–∞—Ç–æ–≤:</b>\n"
                f"<code>{str(e)}</code>\n\n"
                f"<b>üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"‚Ä¢ –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ–±—â–∏—Ö —á–∞—Ç–∞—Ö"
            )

    async def chatsinfocmd(self, message):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—â–∏—Ö —á–∞—Ç–∞—Ö —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .chatsinfo <@user –∏–ª–∏ —Ä–µ–ø–ª–∞–π> [s - –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ]"""
        args = utils.get_args_raw(message).split()
        reply = await message.get_reply_message()
        
        send_to_saved = 's' in args
        if send_to_saved:
            args = [arg for arg in args if arg != 's']
        
        user_arg = args[0] if args else None
        
        if not user_arg and not reply:
            await message.edit(
                "<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.chatsinfo <@user> [s]</code> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "<b>üí° –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—â–∏—Ö —á–∞—Ç–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>\n"
                "<b>üìÅ –î–æ–±–∞–≤—å—Ç–µ 's' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</b>"
            )
            return
        
        await message.edit("<b>üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—â–∏—Ö —á–∞—Ç–∞—Ö...</b>")
        
        try:
            if user_arg:
                if user_arg.isdigit():
                    user = await message.client.get_entity(int(user_arg))
                else:
                    user = await message.client.get_entity(user_arg)
            else:
                user = await message.client.get_entity(reply.sender_id)
                
            user_full = await message.client(GetFullUserRequest(user.id))
            common_chats = await message.client(
                GetCommonChatsRequest(user_id=user.id, max_id=0, limit=100)
            )
            
            if not common_chats.chats:
                user_name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                result_text = f"<b>‚ùå –û–±—â–∏—Ö —á–∞—Ç–æ–≤ —Å {user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>"
            else:
                user_name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                if user.last_name:
                    user_name += f" {user.last_name}"
                    
                result_text = f"<b>üë• –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—â–∏—Ö —á–∞—Ç–∞—Ö —Å <a href='tg://user?id={user.id}'>{user_name}</a>:</b>\n\n"
                
                for i, chat in enumerate(common_chats.chats, 1):
                    chat_name = getattr(chat, 'title', f'–ß–∞—Ç {chat.id}')
                    
                    chat_info = f"{i}. <b>{chat_name}</b>\n"
                    
                    if getattr(chat, 'username', None):
                        chat_info += f"   üìé Username: @{chat.username}\n"
                    
                    chat_info += f"   üÜî ID: <code>{chat.id}</code>\n"
                    
                    if hasattr(chat, 'megagroup') and chat.megagroup:
                        chat_type = "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞"
                    elif hasattr(chat, 'broadcast') and chat.broadcast:
                        chat_type = "–ö–∞–Ω–∞–ª"
                    elif hasattr(chat, 'channel'):
                        chat_type = "–ì—Ä—É–ø–ø–∞/–ö–∞–Ω–∞–ª"
                    else:
                        chat_type = "–ß–∞—Ç"
                    
                    chat_info += f"   üìã –¢–∏–ø: {chat_type}\n"
                    
                    if hasattr(chat, 'participants_count'):
                        chat_info += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat.participants_count}\n"
                    
                    result_text += chat_info + "\n"
                
                result_text += f"<b>üìä –í—Å–µ–≥–æ –æ–±—â–∏—Ö —á–∞—Ç–æ–≤: {len(common_chats.chats)}</b>"
            
            if len(result_text) > 4096:
                status_msg = "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–æ–ª—å—à–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ..." if send_to_saved else "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è, —Å–æ—Ö—Ä–∞–Ω—è—é –≤ —Ñ–∞–π–ª..."
                await message.edit(status_msg)
                
                filename = f"detailed_chats_{user.id}.txt"
                with open(filename, "w", encoding="utf-8") as f:
                    clean_text = result_text.replace("<b>", "").replace("</b>", "")
                    clean_text = clean_text.replace("<code>", "").replace("</code>", "")
                    clean_text = clean_text.replace("<a href='tg://user?id=", "")
                    clean_text = clean_text.replace("'>", " (ID: ").replace("</a>", ")")
                    f.write(clean_text)
                
                target_chat_for_send = "me" if send_to_saved else message.chat_id
                caption = f"<b>üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—â–∏—Ö —á–∞—Ç–∞—Ö —Å {user_name}</b>"
                
                await message.client.send_file(
                    target_chat_for_send,
                    filename,
                    caption=caption,
                    reply_to=message.id if not send_to_saved else None
                )
                
                try:
                    import os
                    os.remove(filename)
                except:
                    pass
                
                if send_to_saved:
                    await message.edit("<b>‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!</b>")
                else:
                    await message.delete()
            else:
                if send_to_saved:
                    await message.client.send_message("me", result_text)
                    await message.edit("<b>‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!</b>")
                else:
                    await message.edit(result_text)
            
        except Exception as e:
            await message.edit(
                f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>\n"
                f"<code>{str(e)}</code>\n\n"
                f"<b>üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"‚Ä¢ –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ–±—â–∏—Ö —á–∞—Ç–∞—Ö"
            )